# -*- coding: utf-8 -*-
"""predictive_pulse.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12HWbbgg0oXIH3z5yhYQmCgzbQkXL8eA4
"""

pip install requests pandas numpy scikit-learn tensorflow flask

import requests
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from flask import Flask, request, jsonify

# Flask app setup
app = Flask(__name__)

# 1. Data Collection and Integration
def get_wearable_data(device_id):
    # Example API call to get data from a wearable device
    url = f"https://api.wearable.com/devices/{device_id}/data"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        raise Exception("Error fetching data from wearable device")

# 2. Data Preprocessing
def preprocess_data(data):
    df = pd.DataFrame(data)
    # Fill missing values
    df.fillna(method='ffill', inplace=True)
    # Normalize data
    scaler = MinMaxScaler()
    df_scaled = scaler.fit_transform(df)
    return df_scaled

# 3. Machine Learning Model (LSTM Example)
def create_model(input_shape):
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Initialize the model (adjust input_shape based on your data)
input_shape = (60, 1)  # Example shape, adjust based on your data
model = create_model(input_shape)

# 4. Real-Time Prediction and Alerts
def predict_blood_pressure(model, data):
    data = np.reshape(data, (1, data.shape[0], data.shape[1]))
    prediction = model.predict(data)
    return prediction[0][0]

def send_alert(prediction, threshold=140):
    if prediction > threshold:
        print("Alert: Blood pressure spike detected!")
        # Code to send alert (e.g., SMS, Email)

# 5. Flask API for Integration
@app.route('/predict', methods=['POST'])
def predict():
    data = request.json['data']
    preprocessed_data = preprocess_data(data)
    latest_data = preprocessed_data[-60:]  # Last 60 time steps
    prediction = predict_blood_pressure(model, latest_data)
    send_alert(prediction)
    return jsonify({'prediction': prediction})

if __name__ == '__main__':
    # Optionally, load a pre-trained model
    # model.load_weights('model_weights.h5')

    app.run(debug=True)

python predictive_pulse.py